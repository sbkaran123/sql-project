
CREATE DATABASE ecommerce;


USE ecommerce;

CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    name VARCHAR(100) NOT NULL,        
    email VARCHAR(100) NOT NULL UNIQUE,
    address VARCHAR(255)               
);


CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    name VARCHAR(100) NOT NULL,        
    price DECIMAL(10, 2) NOT NULL,     
    description TEXT                   
);


CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    customer_id INT NOT NULL,          
    order_date DATE NOT NULL,        
    total_amount DECIMAL(10, 2),       
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);


CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    order_id INT NOT NULL,             
    product_id INT NOT NULL,           
    quantity INT NOT NULL DEFAULT 1,   
    FOREIGN KEY (order_id) REFERENCES orders(id),    
    FOREIGN KEY (product_id) REFERENCES products(id) 
);
-- Insert sample data into customers table
INSERT INTO customers (name, email, address) VALUES
('John Doe', 'john.doe@example.com', '123 Maple St'),
('Jane Smith', 'jane.smith@example.com', '456 Oak St'),
('Alice Johnson', 'alice.johnson@example.com', '789 Pine St');

-- Insert sample data into products table
INSERT INTO products (name, price, description) VALUES
('Product A', 30.00, 'Description of Product A'),
('Product B', 20.00, 'Description of Product B'),
('Product C', 50.00, 'Description of Product C');

-- Insert sample data into orders table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, CURDATE() - INTERVAL 15 DAY, 60.00),
(2, CURDATE() - INTERVAL 10 DAY, 20.00),
(3, CURDATE() - INTERVAL 35 DAY, 50.00);

-- Insert sample data into order_items table
INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 2), -- Order 1 contains 2 units of Product A
(2, 2, 1), -- Order 2 contains 1 unit of Product B
(3, 3, 1); -- Order 3 contains 1 unit of Product C
-- Query 1: Retrieve all customers who have placed an order in the last 30 days
SELECT DISTINCT customers.*
FROM customers
JOIN orders ON customers.id = orders.customer_id
WHERE orders.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Query 2: Get the total amount of all orders placed by each customer
SELECT customers.id AS customer_id, customers.name, SUM(orders.total_amount) AS total_spent
FROM customers
JOIN orders ON customers.id = orders.customer_id
GROUP BY customers.id;

-- Query 3: Update the price of Product C to 45.00
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

-- Query 4: Add a new column 'discount' to the products table
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;

-- Query 5: Retrieve the top 3 products with the highest price
SELECT * FROM products
ORDER BY price DESC
LIMIT 3;

-- Query 6: Get the names of customers who have ordered Product A
SELECT DISTINCT customers.name
FROM customers
JOIN orders ON customers.id = orders.customer_id
JOIN order_items ON orders.id = order_items.order_id
JOIN products ON order_items.product_id = products.id
WHERE products.name = 'Product A';

-- Query 7: Join the orders and customers tables to retrieve the customer's name and order date for each order
SELECT customers.name, orders.order_date
FROM customers
JOIN orders ON customers.id = orders.customer_id;

-- Query 8: Retrieve the orders with a total amount greater than 150.00
SELECT * FROM orders
WHERE total_amount > 150.00;

-- Query 9: Normalize the database by creating a separate table for order items (already implemented)

-- Query 10: Retrieve the average total of all orders
-- Assuming total_amount is recalculated from order_items
SELECT AVG(total_spent.total_amount) AS average_total
FROM (
    SELECT orders.id AS order_id, SUM(products.price * order_items.quantity) AS total_amount
    FROM orders
    JOIN order_items ON orders.id = order_items.order_id
    JOIN products ON order_items.product_id = products.id
    GROUP BY orders.id
) AS total_spent;

